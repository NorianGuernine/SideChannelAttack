import matplotlib.pyplot as plt
import csv
from os import listdir
import numpy as np


N_ENREGISTREMENT=15000
N_ECHANTILLON=3253

bytestart = 0
byteend = 15
keyhypostart = 0
keyhypostop = 256
solvedkey=np.zeros((1,byteend),dtype=float)
plaintext=np.zeros((200,16),dtype=int)
plain=[]
max_courbe=0
num=0
ListeDiffGroupe=[]

Sbox = (
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        )


traces=listdir("traces//")
traces=sorted(traces)
key="0000000000000003243f6a8885a308d3"
#ciphertext="af6aad170535242f28cb33acfce4e97e"
ciphertext= [0xaf,0x6a,0xad,0x17,0x05,0x35,0x24,0x2f,0x28,0xcb,0x33,0xac,0xfc,0xe4,0xe9,0x7e]
#plaintext="1e7964c993d14cbac363a801a2048d4e"
courbe=np.zeros((N_ENREGISTREMENT,N_ECHANTILLON),dtype='int16')

#Recup msg
plaintext=np.zeros((N_ENREGISTREMENT,16),dtype=int)
p=[]
for j in range(0,N_ENREGISTREMENT):
    for i in range(0,len(traces[j])):
            if traces[j][i] == 'm' and traces[j][i+1] == '=':
                    for k in range(0,32,2):
                            p.append(int(traces[j][(i+2)+k]+traces[j][(i+2)+(k+1)],16))
    plaintext[j]=p
    p=[]

#Recup cipher
cip=np.zeros((20000,32),dtype=int)
for j in range(0,20000):
    for i in range(0,len(traces[j])):
            if traces[j][i] == 'c' and traces[j][i+1] == '=':
                    for k in range(0,32):
                            cip[j][k]=(int(traces[j][(i+2)+k],16))

for i in range(0,N_ENREGISTREMENT):
    n=0
    with open("traces//"+str(traces[i]), newline='') as fichier:
              data=csv.reader(filter(lambda row: row[0]!='#',fichier), delimiter=' ')
              for d in data:    #On ne peut pas utiliser de boucle for i in range(x,y) a cause du type de data
                  courbe[i][n]=int(d[0])
                  n+=1
##fig=plt.figure()
##ax=plt.axes()
##plt.title("Enregistrement d'un chiffrement AES")
##ax=ax.set(xlabel='temps(secondes)',ylabel='tension(Volts)')
##plt.plot(courbe[0])
##plt.show()
#Attaque
for BYTE in range(0,1):
    #Matrice d'hypothèse
    Hypoth=np.zeros((N_ENREGISTREMENT,256),dtype=int)
    for k in range(0,3):#for k in range(keyhypostart,keyhypostop):
        groupe1=np.zeros(N_ECHANTILLON,dtype=float)
        nbtraces1=0
        nbtraces2=0
        groupe2=np.zeros(N_ECHANTILLON,dtype=float)
        diffGroupe=np.zeros(N_ECHANTILLON,dtype=float)
        groupfin = np.zeros((1,N_ECHANTILLON),dtype=int)
        moyenGroupe1=np.zeros(N_ECHANTILLON,dtype=float)
        moyenGroupe2=np.zeros(N_ECHANTILLON,dtype=float)
        for n in range(0,N_ENREGISTREMENT):
            Hypoth[n,k]=plaintext[n,BYTE]^k
            test = Hypoth[n,k]
            Hypoth[n,k]=Sbox[test]
            firstbit=Hypoth[n,k] & 0x01
            if firstbit == 1:
                for i in range(0,N_ECHANTILLON):
                    groupe1[i]=groupe1[i]+courbe[n][i]
                nbtraces1 +=1
            else:
                for i in range(0,N_ECHANTILLON):
                    groupe2[i]=groupe2[i]+courbe[n][i]
                nbtraces2 +=1

        for i in range(0,N_ECHANTILLON):
            moyenGroupe1[i]=groupe1[i]/nbtraces1
            moyenGroupe2[i]=groupe2[i]/nbtraces2
            diffGroupe[i] = abs(moyenGroupe1[i]-moyenGroupe2[i])
        ListeDiffGroupe.append(diffGroupe)
        print("cle n° "+str(k))
    print("Byte n° "+str(BYTE))
    
maxi = 0
numListe = 0
for Liste in ListeDiffGroupe:
    if max(Liste) > maxi:
	    maxi = max(Liste)
	    numListe = num
    num += 1
print(numListe)
